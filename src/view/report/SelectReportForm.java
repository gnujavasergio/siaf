/*

 * To change this template, choose Tools | Templates

 * and open the template in the editor.

 */
package view.report;

import datechooser.events.SelectionChangedEvent;
import datechooser.events.SelectionChangedListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import model.domain.ActivoFijo;
import model.domain.Auxiliar;
import model.domain.Configuracion;
import model.domain.Entidad;
import model.domain.Grupo;
import model.domain.Oficina;
import model.domain.Responsable;
import model.domain.Unidad;
import model.domain.Usuario;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JRSaveContributor;
import net.sf.jasperreports.view.JRViewer;
import net.sf.jasperreports.view.JasperViewer;
import org.jc.JCCalendar;
import utils.IconUI;
import utils.ResourceSet;
import view.ViewMain;
import view.common.CommonDialog;

/**
 *
 * ReportForm
 *
 * @author Sergio Antonio Ochoa Martinez - gnu.java.sergio@gmail.com
 * @version 0.1
 */
public final class SelectReportForm extends javax.swing.JPanel {

    private CtrlSelectReportForm ctrlSelectReportForm;
    private DefaultComboBoxModel comboBoxModelOficina;
    private DefaultComboBoxModel comboBoxModelUnidad;
    private DefaultComboBoxModel comboBoxModelGrupo;
    private DefaultComboBoxModel comboBoxModelAuxiliar;
    private DefaultComboBoxModel comboBoxModelResponsable;
    private CommonDialog commonDialog;
    public static SelectReportForm selectReportForm;
    private boolean consolidado;
    private Unidad unidad;
    private Grupo grupo;
    private Auxiliar auxiliar;
    private Oficina oficina;
    private Responsable responsable;
    private Date start;
    private Date end;
    private String condicion = "";
    private Object object;
    private boolean calcular = true;

    /**
     * ReportForm
     */
    public SelectReportForm() {
        ctrlSelectReportForm = new CtrlSelectReportForm();
        initComponents();
        initReportForm();
    }

    public void initComboBoxUnidad(java.util.List list) {
        comboBoxModelUnidad = new DefaultComboBoxModel();
        comboBoxModelUnidad.removeAllElements();
        comboBoxModelUnidad.addElement("Seleccione Unidad");
        for (Object o : list) {
            comboBoxModelUnidad.addElement((Unidad) o);
        }
        cbUnidad.setModel(comboBoxModelUnidad);
    }

    public void initComboBoxGrupo(java.util.List list) {
        comboBoxModelGrupo = new DefaultComboBoxModel();
        comboBoxModelGrupo.removeAllElements();
        comboBoxModelGrupo.addElement("Seleccione Grupo");
        for (Object o : list) {
            comboBoxModelGrupo.addElement((Grupo) o);
        }
        cbGrupo.setModel(comboBoxModelGrupo);
    }

    public void initReportForm() {
        tfUFV.setText(ViewMain.viewMain.getConfiguracion().getUFV());
        tfEntidad.setText(ViewMain.viewMain.getEntidad().getNombre());
        Unidad u = new Unidad();
        u.setEntidad(ViewMain.viewMain.getEntidad());
        initComboBoxUnidad(ViewMain.DAO.getObjects(u));
        initComboBoxGrupo(ViewMain.DAO.getObjects(new Grupo()));
    }

    public CommonDialog getCommonDialog() {
        return commonDialog;
    }

    /**
     *
     * This method is called from within the constructor to initialize the form.
     *
     * WARNING: Do NOT modify this code. The content of this method is always
     *
     * regenerated by the Form Editor.
     *
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgDestino = new javax.swing.ButtonGroup();
        headerEntidad = new org.jdesktop.swingx.JXHeader();
        jTaskPane1 = new com.l2fprod.common.swing.JTaskPane();
        tpgSelectReport = new com.l2fprod.common.swing.JTaskPaneGroup();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        cbUnidad = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cbGrupo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cbAuxiliar = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cbOficina = new javax.swing.JComboBox();
        cbResponsable = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbAllGrupo = new javax.swing.JCheckBox();
        cbAllAuxiliar = new javax.swing.JCheckBox();
        cbAllOficina = new javax.swing.JCheckBox();
        cbAllResponsable = new javax.swing.JCheckBox();
        tfEntidad = new javax.swing.JTextField();
        cbAllUnidad = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        dccStart = new datechooser.beans.DateChooserCombo();
        dccEnd = new datechooser.beans.DateChooserCombo();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbAllDate = new javax.swing.JCheckBox();
        panelButton = new javax.swing.JPanel();
        bGenerar = new org.jc.swing.CoolButton(0);
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        tfUFV = new javax.swing.JTextField();
        tpgGenerar = new com.l2fprod.common.swing.JTaskPaneGroup();
        jPanel5 = new javax.swing.JPanel();
        panelDestino = new javax.swing.JPanel();
        rbPantalla = new javax.swing.JRadioButton();
        rbExcel = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        bAceptar = new org.jc.swing.CoolButton(0);
        bCancelar = new org.jc.swing.CoolButton(0);
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listReport = new javax.swing.JList();

        headerEntidad.setDescription("");
        headerEntidad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/entidad.png"))); // NOI18N
        headerEntidad.setIconPosition(org.jdesktop.swingx.JXHeader.IconPosition.LEFT);
        headerEntidad.setTitle("Reportes");
        headerEntidad.setTitleFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N

        tpgSelectReport.setTitle("Selecionar");

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        java.awt.GridBagLayout jPanel3Layout = new java.awt.GridBagLayout();
        jPanel3Layout.columnWidths = new int[] {0, 5, 0, 5, 0};
        jPanel3Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel3.setLayout(jPanel3Layout);

        cbUnidad.addItemListener(ctrlSelectReportForm);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 322;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(cbUnidad, gridBagConstraints);

        jLabel4.setText("Unidad:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(jLabel4, gridBagConstraints);

        jLabel1.setText("Entidad:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(jLabel1, gridBagConstraints);

        cbGrupo.addItemListener(ctrlSelectReportForm);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 322;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(cbGrupo, gridBagConstraints);

        jLabel5.setText("Grupo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(jLabel5, gridBagConstraints);

        cbAuxiliar.addItemListener(ctrlSelectReportForm);
        cbAuxiliar.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 322;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(cbAuxiliar, gridBagConstraints);

        jLabel8.setText("Auxiliar:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(jLabel8, gridBagConstraints);

        cbOficina.addItemListener(ctrlSelectReportForm);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.ipadx = 322;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(cbOficina, gridBagConstraints);

        cbResponsable.setEnabled(false);
        cbResponsable.addItemListener(ctrlSelectReportForm);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.ipadx = 322;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(cbResponsable, gridBagConstraints);

        jLabel7.setText("Oficina:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(jLabel7, gridBagConstraints);

        jLabel6.setText("Responsable:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(jLabel6, gridBagConstraints);

        cbAllGrupo.setText("Todo");
        cbAllGrupo.addActionListener(ctrlSelectReportForm);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(cbAllGrupo, gridBagConstraints);

        cbAllAuxiliar.setText("Todo");
        cbAllAuxiliar.addActionListener(ctrlSelectReportForm);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(cbAllAuxiliar, gridBagConstraints);

        cbAllOficina.setText("Todo");
        cbAllOficina.addActionListener(ctrlSelectReportForm);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(cbAllOficina, gridBagConstraints);

        cbAllResponsable.setText("Todo");
        cbAllResponsable.addActionListener(ctrlSelectReportForm);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(cbAllResponsable, gridBagConstraints);

        tfEntidad.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 344;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(tfEntidad, gridBagConstraints);

        cbAllUnidad.setText("Consolidado");
        cbAllUnidad.addActionListener(ctrlSelectReportForm);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(cbAllUnidad, gridBagConstraints);

        jPanel4.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Generar Reporte"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        try {
            dccStart.setDefaultPeriods(new datechooser.model.multiple.PeriodSet(new datechooser.model.multiple.Period(new java.util.GregorianCalendar(1990, 0, 1),
                new java.util.GregorianCalendar(1990, 0, 1))));
    } catch (datechooser.model.exeptions.IncompatibleDataExeption e1) {
        e1.printStackTrace();
    }
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.ipadx = 297;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(10, 0, 5, 0);
    jPanel1.add(dccStart, gridBagConstraints);

    dccEnd.setFormat(0);
    dccEnd.addSelectionChangedListener(ctrlSelectReportForm);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.ipadx = 297;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 0, 10, 0);
    jPanel1.add(dccEnd, gridBagConstraints);

    jLabel2.setText("De:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
    jPanel1.add(jLabel2, gridBagConstraints);

    jLabel3.setText("hasta:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
    jPanel1.add(jLabel3, gridBagConstraints);

    cbAllDate.setText("Todo");
    cbAllDate.addActionListener(ctrlSelectReportForm);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
    jPanel1.add(cbAllDate, gridBagConstraints);

    jPanel4.add(jPanel1, java.awt.BorderLayout.CENTER);

    panelButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    bGenerar.setText("Generar");
    bGenerar.addActionListener(ctrlSelectReportForm);
    bGenerar.setIcon(IconUI.getResizableIcon("report", 32, 32));

    jLabel9.setText("UFV:");

    tfUFV.setEditable(false);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel9)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(tfUFV, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap(23, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel9)
                .addComponent(tfUFV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(21, 21, 21))
    );

    javax.swing.GroupLayout panelButtonLayout = new javax.swing.GroupLayout(panelButton);
    panelButton.setLayout(panelButtonLayout);
    panelButtonLayout.setHorizontalGroup(
        panelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelButtonLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 807, Short.MAX_VALUE)
            .addComponent(bGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    panelButtonLayout.setVerticalGroup(
        panelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelButtonLayout.createSequentialGroup()
            .addGroup(panelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelButtonLayout.createSequentialGroup()
                    .addGap(5, 5, 5)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelButtonLayout.createSequentialGroup()
                    .addGap(27, 27, 27)
                    .addComponent(bGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );

    jPanel4.add(panelButton, java.awt.BorderLayout.SOUTH);

    tpgSelectReport.getContentPane().add(jPanel4);

    jTaskPane1.add(tpgSelectReport);

    tpgGenerar.setExpanded(false);
    tpgGenerar.setTitle("Generar Reporte");

    panelDestino.setBorder(javax.swing.BorderFactory.createTitledBorder("Destino"));

    bgDestino.add(rbPantalla);
    rbPantalla.setSelected(true);
    rbPantalla.setText("Pantalla");
    panelDestino.add(rbPantalla);

    bgDestino.add(rbExcel);
    rbExcel.setText("Excel");
    panelDestino.add(rbExcel);

    jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

    bAceptar.setText("Aceptar");
    bAceptar.addActionListener(ctrlSelectReportForm);
    bAceptar.setIcon(IconUI.getResizableIcon("report", 32, 32));
    jPanel8.add(bAceptar);

    bCancelar.setText("Cancelar");
    bCancelar.addActionListener(ctrlSelectReportForm);
    bCancelar.setIcon(IconUI.getResizableIcon("cancelar", 32, 32));
    jPanel8.add(bCancelar);

    jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

    listReport.setModel(new javax.swing.AbstractListModel() {
        String[] strings = { "Inventario ordenado por Código de Activo", "Inventario ordenado por Grupo Contable", "Inventario ordenado por Grupo y Auxiliar Contable", "Inventario ordenado por Oficina", "Inventario ordenado por Oficina y Responsable", "Inventario ordenado por Grupo Contable y Organismo", "Detalle de Responsables por Oficina", "Reporte de Transferencia de Activos", "Reporte de Historico de Activos Revaluados", "Reporte Historico de Activos dados de Baja", "Reporte de Indices UFV", "Asignación Individual de Bienes", "Acta de Devolución de Bienes", "Resumen de Activos Fijos por Grupo" };
        public int getSize() { return strings.length; }
        public Object getElementAt(int i) { return strings[i]; }
    });
    listReport.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane1.setViewportView(listReport);

    jPanel6.add(jScrollPane1);

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 1038, Short.MAX_VALUE)
        .addComponent(panelDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    jPanel5Layout.setVerticalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(panelDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    tpgGenerar.getContentPane().add(jPanel5);

    jTaskPane1.add(tpgGenerar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jTaskPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(headerEntidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(headerEntidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTaskPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 827, Short.MAX_VALUE))
    );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jc.swing.CoolButton bAceptar;
    private org.jc.swing.CoolButton bCancelar;
    private org.jc.swing.CoolButton bGenerar;
    private javax.swing.ButtonGroup bgDestino;
    private javax.swing.JCheckBox cbAllAuxiliar;
    private javax.swing.JCheckBox cbAllDate;
    private javax.swing.JCheckBox cbAllGrupo;
    private javax.swing.JCheckBox cbAllOficina;
    private javax.swing.JCheckBox cbAllResponsable;
    private javax.swing.JCheckBox cbAllUnidad;
    private javax.swing.JComboBox cbAuxiliar;
    private javax.swing.JComboBox cbGrupo;
    private javax.swing.JComboBox cbOficina;
    private javax.swing.JComboBox cbResponsable;
    private javax.swing.JComboBox cbUnidad;
    private datechooser.beans.DateChooserCombo dccEnd;
    private datechooser.beans.DateChooserCombo dccStart;
    private org.jdesktop.swingx.JXHeader headerEntidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private com.l2fprod.common.swing.JTaskPane jTaskPane1;
    private javax.swing.JList listReport;
    private javax.swing.JPanel panelButton;
    private javax.swing.JPanel panelDestino;
    private javax.swing.JRadioButton rbExcel;
    private javax.swing.JRadioButton rbPantalla;
    private javax.swing.JTextField tfEntidad;
    private javax.swing.JTextField tfUFV;
    private com.l2fprod.common.swing.JTaskPaneGroup tpgGenerar;
    private com.l2fprod.common.swing.JTaskPaneGroup tpgSelectReport;
    // End of variables declaration//GEN-END:variables

    protected void reportView(String direccion, HashMap parametros, String title) {
        try {
            InputStream fileName = ResourceSet.openStream(direccion);

            JasperPrint jasperPrint = JasperFillManager.fillReport(fileName, parametros, ViewMain.viewMain.getConexion().getConn());

            JasperViewer viewer = new JasperViewer(jasperPrint, false);
            Field jrViewerField;
            try {
                jrViewerField = viewer.getClass().getDeclaredField("viewer");

                jrViewerField.setAccessible(true);
                JRViewer jrViewer = (JRViewer) jrViewerField.get(viewer);
                List<JRSaveContributor> savers = new ArrayList<JRSaveContributor>();
                for (JRSaveContributor sc : jrViewer.getSaveContributors()) {
                    savers.add(sc);
                }
                for (JRSaveContributor sc : savers) {
                    if (!sc.getClass().getName().toLowerCase().contains("pdf")) {
                        jrViewer.removeSaveContributor(sc);
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            viewer.setTitle(title);
            viewer.setVisible(true);

        } catch (JRException ex) {
            System.err.println("Error iReport: " + ex.getMessage());
        } finally {
            parametros = null;
            System.gc();
        }
    }

    public void updateActivoFijo() {
        List list;
        ActivoFijo activoFijo;
        if (consolidado) {
            activoFijo = new ActivoFijo();
            if (!cbAllGrupo.isSelected()) {
                activoFijo.setGrupo(grupo);
            }
            list = ViewMain.DAO.select(activoFijo);
        } else {
            Oficina o = new Oficina();
            o.setUnidad(unidad);
            activoFijo = new ActivoFijo();
            activoFijo.setOficina(o);
            list = ViewMain.DAO.getObjects(activoFijo);
        }
        if (list != null) {
            for (int i = 0; i < list.size(); i++) {
                activoFijo = (ActivoFijo) list.get(i);
                Configuracion configuracion = new Configuracion();
                configuracion.setFechaUFV(activoFijo.getIncorporacion());
                configuracion = (Configuracion) ViewMain.DAO.getObject(configuracion);
                activoFijo.setIndiceUFV(configuracion.getUFV());
                activoFijo.setUsuario(ViewMain.viewMain.getUsuario());
                activoFijo.calculo(end);
                ViewMain.DAO.update(activoFijo);
            }
        }
    }

    private void report(HashMap parameters, String nameReport, String title) {
        if (calcular) {
            updateActivoFijo();
            Entidad entidad = ViewMain.viewMain.getEntidad();
            String UFV = ViewMain.viewMain.getConfiguracion().getUFV();
            parameters.put("p_entidad", entidad.getIdEntidad() + "  " + entidad.getNombre());
            if (consolidado) {
                parameters.put("p_unidad", "CONSOLIDADO");
            } else {
                parameters.put("p_unidad", unidad.getIdUnidad() + "  " + unidad.getDescripcion());
            }
            parameters.put("p_condicion", "true" + condicion);
            parameters.put("p_ufv", UFV);
        }
        Usuario usuario = ViewMain.viewMain.getUsuario();
        parameters.put("p_usuario", usuario.getLogin());
        parameters.put("p_end", end);
        parameters.put("p_fecha", Calendar.getInstance().getTime());
        parameters.put("p_logo", ResourceSet.openStream("/resources/images/logo.jpg"));
        reportView(nameReport, parameters, title);
    }

    public void comparar() {
        if (!cbAllUnidad.isSelected()) {
            consolidado = false;
            object = cbUnidad.getSelectedItem();
            if (object instanceof Unidad) {
                unidad = (Unidad) object;
                condicion = " AND oficinas.idUnidad = " + unidad.getIdUnidad();
                if (!cbAllGrupo.isSelected()) {
                    object = cbGrupo.getSelectedItem();
                    if (object instanceof Grupo) {
                        grupo = (Grupo) object;
                        condicion += " AND grupos.idGrupo = " + grupo.getIdGrupo();
                        if (!cbAllAuxiliar.isSelected()) {
                            object = cbAuxiliar.getSelectedItem();
                            if (object instanceof Auxiliar) {
                                auxiliar = (Auxiliar) object;
                                condicion += " AND auxiliares.idAuxiliar = " + auxiliar.getIdAuxiliar();
                            }
                        }
                    }
                }
                if (!cbAllOficina.isSelected()) {
                    object = cbOficina.getSelectedItem();
                    if (object instanceof Oficina) {
                        oficina = (Oficina) object;
                        condicion += " AND oficinas.idOficina = " + oficina.getIdOficina();
                        if (!cbAllResponsable.isSelected()) {
                            object = cbResponsable.getSelectedItem();
                            if (object instanceof Responsable) {
                                responsable = (Responsable) object;
                                condicion += " AND responsables.idResponsable = " + responsable.getIdResponsable();
                            }
                        }
                    }
                }
            }
        } else {
            consolidado = true;
            if (!cbAllGrupo.isSelected()) {
                object = cbGrupo.getSelectedItem();
                if (object instanceof Grupo) {
                    grupo = (Grupo) object;
                    condicion += " AND grupos.idGrupo = " + grupo.getIdGrupo();
                }
            }
        }
    }

    public List resumenGrupo(List dataFinal, List dataAnterior) {
        int k = 0;
        List<ActivoFijo> data = new ArrayList<ActivoFijo>();
        for (int i = 0; i < dataFinal.size(); i++) {
            ActivoFijo activoF = new ActivoFijo();
            ActivoFijo activoFijo = (ActivoFijo) dataFinal.get(i);
            ActivoFijo af = null;
            try {
                af = (ActivoFijo) dataAnterior.get(k);
            } catch (IndexOutOfBoundsException e) {
                af = new ActivoFijo();
            }
            activoF.setNombreGrupo(activoFijo.getGrupo().getNombre());
            activoF.setCantidad(activoFijo.getCantidad());
            activoF.setVidaUtil(activoFijo.getGrupo().getVidaUtil());
            activoF.setCostoInicial(activoFijo.getCostoInicial());
            if (activoFijo.getGrupo().getIdGrupo() == af.getGrupo().getIdGrupo()) {
                activoF.setValorInicial(af.getValor() + activoFijo.getCostoInicial() - af.getCostoInicial());
                activoF.setDepreciacionAcumuladaInicial(af.getDepreciacionAcumulada());
                activoF.setValorNetoInicial(af.getValor() + activoFijo.getCostoInicial() - af.getCostoInicial() - af.getDepreciacionAcumulada());
                activoF.setActualizacionGestion(activoFijo.getValor() - (af.getValor() + activoFijo.getCostoInicial() - af.getCostoInicial()));
                activoF.setActualizacionDepreciacionAcumulada((activoFijo.getDepreciacionAcumulada() - activoFijo.getDepreciacionGestion()) - af.getDepreciacionAcumulada());
                k++;
            } else {
                activoF.setValorInicial(activoFijo.getCostoInicial());
                activoF.setDepreciacionAcumuladaInicial(0);
                activoF.setValorNetoInicial(activoFijo.getCostoInicial());
                activoF.setActualizacionGestion(activoFijo.getValor() - activoFijo.getCostoInicial());
                activoF.setActualizacionDepreciacionAcumulada(activoFijo.getDepreciacionAcumulada() - activoFijo.getDepreciacionGestion());
            }

            activoF.setValor(activoFijo.getValor());
            activoF.setDepreciacionGestion(activoFijo.getDepreciacionGestion());
            activoF.setDepreciacionAcumulada(activoFijo.getDepreciacionAcumulada());
            activoF.setDepreciacionAcumulada(activoFijo.getDepreciacionAcumulada());
            activoF.setValorNeto(activoFijo.getValorNeto());
            data.add(activoF);
        }
        return data;
    }

    private class CtrlSelectReportForm implements ActionListener, ItemListener, SelectionChangedListener {

        @Override
        @SuppressWarnings("empty-statement")
        public void actionPerformed(ActionEvent e) {
            Object aux = e.getSource();
            if (aux.equals(cbAllUnidad)) {
                if (cbAllUnidad.isSelected()) {
                    cbUnidad.setEnabled(false);
                    cbOficina.setEnabled(false);
                    cbResponsable.setEnabled(false);
                    cbAllAuxiliar.setEnabled(false);
                    cbAllAuxiliar.setSelected(false);
                    cbAllOficina.setEnabled(false);
                    cbAllOficina.setSelected(false);
                    cbAllResponsable.setEnabled(false);
                    cbAllResponsable.setEnabled(false);
                    cbUnidad.setSelectedIndex(-1);
                    cbGrupo.setSelectedIndex(-1);
                    cbAuxiliar.setSelectedIndex(-1);
                    cbOficina.setSelectedIndex(-1);
                    cbResponsable.setSelectedIndex(-1);
                } else {
                    cbUnidad.setEnabled(true);
                    cbGrupo.setEnabled(true);
                    cbAllGrupo.setEnabled(true);
                    cbAuxiliar.setEnabled(true);
                    cbAllAuxiliar.setEnabled(true);
                    cbAllOficina.setEnabled(true);
                    cbAllResponsable.setEnabled(true);
                }
            } else if (aux.equals(cbAllGrupo)) {
                if (cbAllGrupo.isSelected()) {
                    cbGrupo.setEnabled(false);
                    cbAuxiliar.setEnabled(false);
                    cbAllAuxiliar.setEnabled(false);
                    cbAllAuxiliar.setSelected(false);
                    cbGrupo.setSelectedIndex(-1);
                    cbAuxiliar.setSelectedIndex(-1);
                } else {
                    cbGrupo.setEnabled(true);
                    cbAuxiliar.setEnabled(true);
                    cbAllAuxiliar.setEnabled(true);
                }
            } else if (aux.equals(cbAllAuxiliar)) {
                if (!cbAllGrupo.isSelected()) {
                    if (cbAllAuxiliar.isSelected()) {
                        cbAuxiliar.setEnabled(false);
                        cbAuxiliar.setSelectedIndex(-1);
                    } else {
                        cbAuxiliar.setEnabled(true);
                    }
                }
            } else if (aux.equals(cbAllOficina)) {
                if (cbAllOficina.isSelected()) {
                    cbOficina.setEnabled(false);
                    cbResponsable.setEnabled(false);
                    cbAllResponsable.setEnabled(false);
                    cbAllResponsable.setSelected(false);
                    cbOficina.setSelectedIndex(-1);
                    cbResponsable.setSelectedIndex(-1);
                } else {
                    cbOficina.setEnabled(true);
                    cbResponsable.setEnabled(true);
                    cbAllResponsable.setEnabled(true);
                }
            } else if (aux.equals(cbAllResponsable)) {
                if (!cbAllOficina.isSelected()) {
                    if (cbAllResponsable.isSelected()) {
                        cbResponsable.setEnabled(false);
                        cbResponsable.setSelectedIndex(-1);
                    } else {
                        cbResponsable.setEnabled(true);
                    }
                }
            } else if (aux.equals(cbAllDate)) {
                if (cbAllDate.isSelected()) {
                    dccStart.setEnabled(false);
                    dccEnd.setEnabled(false);
                } else {
                    dccStart.setEnabled(true);
                    dccEnd.setEnabled(true);
                }
            } else if (aux.equals(bGenerar)) {
                if (!cbAllUnidad.isSelected()) {
                    consolidado = false;
                    object = cbUnidad.getSelectedItem();
                    if (object instanceof Unidad) {
                        unidad = (Unidad) object;
                        condicion += " AND oficinas.idUnidad = " + unidad.getIdUnidad();
                        if (!cbAllGrupo.isSelected()) {
                            object = cbGrupo.getSelectedItem();
                            if (object instanceof Grupo) {
                                grupo = (Grupo) object;
                                condicion += " AND grupos.idGrupo = " + grupo.getIdGrupo();
                                if (!cbAllAuxiliar.isSelected()) {
                                    object = cbAuxiliar.getSelectedItem();
                                    if (object instanceof Auxiliar) {
                                        auxiliar = (Auxiliar) object;
                                        condicion += " AND auxiliares.idAuxiliar = " + auxiliar.getIdAuxiliar();
                                    }
                                }
                            }
                        }
                        if (!cbAllOficina.isSelected()) {
                            object = cbOficina.getSelectedItem();
                            if (object instanceof Oficina) {
                                oficina = (Oficina) object;
                                condicion += " AND oficinas.idOficina = " + oficina.getIdOficina();
                                if (!cbAllResponsable.isSelected()) {
                                    object = cbResponsable.getSelectedItem();
                                    if (object instanceof Responsable) {
                                        responsable = (Responsable) object;
                                        condicion += " AND responsables.idResponsable = " + responsable.getIdResponsable();
                                    }
                                }
                            }
                        }
                    }
                } else {
                    consolidado = true;
                    if (!cbAllGrupo.isSelected()) {
                        object = cbGrupo.getSelectedItem();
                        if (object instanceof Grupo) {
                            grupo = (Grupo) object;
                            condicion += " AND grupos.idGrupo = " + grupo.getIdGrupo();
                        }
                    }
                }
                start = dccStart.getCurrent().getTime();
                end = dccEnd.getCurrent().getTime();
                if (!cbAllDate.isSelected()) {
                    JCCalendar startCalendar = new JCCalendar(start);
                    String startFormat = startCalendar.getYear() + "-" + startCalendar.getMonthInt() + "-" + startCalendar.getDayOfMonth();
                    JCCalendar endCalendar = new JCCalendar(end);
                    String endFormat = endCalendar.getYear() + "-" + endCalendar.getMonthInt() + "-" + endCalendar.getDayOfMonth();
                    condicion += " AND (activosFijos.incorporacion >= '" + startFormat + "' AND activosFijos.incorporacion <= '" + endFormat + "')";
                }
                tpgSelectReport.setExpanded(false);
                tpgGenerar.setExpanded(true);
            } else if (aux.equals(bAceptar)) {
                if (listReport.getSelectedIndex() != -1) {
                    if (rbPantalla.isSelected()) {
                        String nameReport = "";
                        HashMap parameters = new HashMap();
                        if (listReport.getSelectedIndex() == 0) {
                            calcular = true;
                            nameReport = "/view/report/ordenadoCodigo.jasper";
                        } else if (listReport.getSelectedIndex() == 1) {
                            calcular = true;
                            nameReport = "/view/report/ordenadoGrupo.jasper";
                        } else if (listReport.getSelectedIndex() == 2) {
                            calcular = true;
                            nameReport = "/view/report/ordenadoGrupoAuxiliar.jasper";
                        } else if (listReport.getSelectedIndex() == 3) {
                            calcular = true;
                            nameReport = "/view/report/ordenadoOficina.jasper";
                        } else if (listReport.getSelectedIndex() == 4) {
                            calcular = true;
                            nameReport = "/view/report/ordenadoOficinaResponsable.jasper";
                        } else if (listReport.getSelectedIndex() == 5) {
                            calcular = true;
                            nameReport = "/view/report/ordenadoGrupoOrganismo.jasper";
                        } else if (listReport.getSelectedIndex() == 6) {
                            calcular = true;
                            nameReport = "/view/report/detalleResponsableOficina.jasper";
                        } else if (listReport.getSelectedIndex() == 7) {
                            calcular = true;
                            nameReport = "/view/report/historicoActivosTransfer.jasper";
                        } else if (listReport.getSelectedIndex() == 8) {
                            calcular = true;
                            nameReport = "/view/report/historicoActivosRevaluados.jasper";
                        } else if (listReport.getSelectedIndex() == 9) {
                            calcular = true;
                            nameReport = "/view/report/historicoActivosBajas.jasper";
                        } else if (listReport.getSelectedIndex() == 10) {
                            parameters.put("p_start", start);
                            calcular = false;
                            nameReport = "/view/report/UFV.jasper";
                        }
                        if (listReport.getSelectedIndex() == 13) {
                            updateActivoFijo();
                            List dataFinal = ViewMain.DAO.query(new ActivoFijo(), 10, condicion);
                            comparar();
                            JCCalendar endCalendar = new JCCalendar(end);
                            Calendar calendar = Calendar.getInstance();
                            calendar.set(endCalendar.getYear() - 1, Calendar.DECEMBER, 31);
                            end = calendar.getTime();
                            updateActivoFijo();
                            JCCalendar startCalendar = new JCCalendar(start);
                            String startFormat = startCalendar.getYear() + "-" + startCalendar.getMonthInt() + "-" + startCalendar.getDayOfMonth();
                            endCalendar = new JCCalendar(end);
                            String endFormat = endCalendar.getYear() + "-" + endCalendar.getMonthInt() + "-" + endCalendar.getDayOfMonth();
                            condicion += " AND (activosFijos.incorporacion >= '" + startFormat + "' AND activosFijos.incorporacion <= '" + endFormat + "')";
                            List dataAnterior = ViewMain.DAO.query(new ActivoFijo(), 10, condicion);
                            List<ActivoFijo> data = resumenGrupo(dataFinal, dataAnterior);
                            Entidad entidad = ViewMain.viewMain.getEntidad();
                            String UFV = ViewMain.viewMain.getConfiguracion().getUFV();
                            parameters.put("p_entidad", entidad.getIdEntidad() + "  " + entidad.getNombre());
                            if (consolidado) {
                                parameters.put("p_unidad", "CONSOLIDADO");
                            } else {
                                parameters.put("p_unidad", unidad.getIdUnidad() + "  " + unidad.getDescripcion());
                            }
                            parameters.put("p_condicion", "true" + condicion);
                            parameters.put("p_ufv", UFV);
                            Usuario usuario = ViewMain.viewMain.getUsuario();
                            parameters.put("p_usuario", usuario.getLogin());
                            parameters.put("p_end", end);
                            parameters.put("p_fecha", Calendar.getInstance().getTime());
                            parameters.put("p_logo", ResourceSet.openStream("/resources/images/logo.jpg"));
                            nameReport = "/view/report/resumenActivosGrupo.jasper";
                            try {
                                InputStream fileName = ResourceSet.openStream(nameReport);

                                JasperPrint jasperPrint = JasperFillManager.fillReport(fileName, parameters, new JRBeanCollectionDataSource(data));

                                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                                Field jrViewerField;
                                try {
                                    jrViewerField = viewer.getClass().getDeclaredField("viewer");

                                    jrViewerField.setAccessible(true);
                                    JRViewer jrViewer = (JRViewer) jrViewerField.get(viewer);
                                    List<JRSaveContributor> savers = new ArrayList<JRSaveContributor>();
                                    for (JRSaveContributor sc : jrViewer.getSaveContributors()) {
                                        savers.add(sc);
                                    }
                                    for (JRSaveContributor sc : savers) {
                                        if (!sc.getClass().getName().toLowerCase().contains("pdf")) {
                                            jrViewer.removeSaveContributor(sc);
                                        }
                                    }
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                                viewer.setTitle(listReport.getSelectedValue().toString());
                                viewer.setVisible(true);

                            } catch (JRException ex) {
                                System.err.println("Error iReport: " + ex.getMessage());
                            } finally {
                                parameters = null;
                                System.gc();
                            }
                        } else {
                            report(parameters, nameReport, listReport.getSelectedValue().toString());
                        }
                    } else {
                        List data;
                        try {
                            String nameUnidad = "CONSOLIDADO - ";
                            if (!consolidado) {
                                nameUnidad = unidad.getDescripcion() + " - ";
                            }
                            if (listReport.getSelectedIndex() == 0) {
                                updateActivoFijo();
                                data = ViewMain.DAO.query(new ActivoFijo(), 0, condicion);

                                ReportExcel.reportOrdenadoCodigo(nameUnidad + listReport.getSelectedValue().toString(), data);
                            } else if (listReport.getSelectedIndex() == 1) {
                                updateActivoFijo();
                                data = ViewMain.DAO.query(new ActivoFijo(), 1, condicion);
                                List grupos = ViewMain.DAO.getObjects(new Grupo());
                                ReportExcel.reportOrdenadoGrupo(nameUnidad + listReport.getSelectedValue().toString(), data, grupos);
                            } else if (listReport.getSelectedIndex() == 2) {
                            } else if (listReport.getSelectedIndex() == 3) {
                                if (unidad != null) {
                                    updateActivoFijo();
                                    data = ViewMain.DAO.query(new ActivoFijo(), 3, condicion);
                                    Oficina oficina = new Oficina();
                                    oficina.setUnidad(unidad);
                                    List oficinas = ViewMain.DAO.getObjects(oficina);
                                    ReportExcel.reportOrdenadoOficina(nameUnidad + listReport.getSelectedValue().toString(), data, oficinas);
                                } else {
                                    JOptionPane.showMessageDialog(ViewMain.viewMain, "Tiene que seleccionar una Unidad", "Mensaje", JOptionPane.ERROR_MESSAGE);
                                }
                            } else if (listReport.getSelectedIndex() == 4) {
                            } else if (listReport.getSelectedIndex() == 5) {
                            } else if (listReport.getSelectedIndex() == 6) {
                            } else if (listReport.getSelectedIndex() == 7) {
                                updateActivoFijo();
                                data = ViewMain.DAO.query(new ActivoFijo(), 7, condicion);
                                ReportExcel.reportTranfer(nameUnidad + listReport.getSelectedValue().toString(), data);
                            } else if (listReport.getSelectedIndex() == 8) {
                                updateActivoFijo();
                                data = ViewMain.DAO.query(new ActivoFijo(), 8, condicion);
                                ReportExcel.reportRevaluos(nameUnidad + listReport.getSelectedValue().toString(), data);

                            } else if (listReport.getSelectedIndex() == 9) {
                                updateActivoFijo();
                                data = ViewMain.DAO.query(new ActivoFijo(), 9, condicion);
                                ReportExcel.reportBaja(nameUnidad + listReport.getSelectedValue().toString(), data);
                            } else if (listReport.getSelectedIndex() == 10) {
                            } else if (listReport.getSelectedIndex() == 13) {
                                updateActivoFijo();
                                data = ViewMain.DAO.query(new ActivoFijo(), 10, condicion);
                                comparar();
                                JCCalendar endCalendar = new JCCalendar(end);
                                Calendar calendar = Calendar.getInstance();
                                calendar.set(endCalendar.getYear() - 1, Calendar.DECEMBER, 31);
                                end = calendar.getTime();
                                updateActivoFijo();
                                JCCalendar startCalendar = new JCCalendar(start);
                                String startFormat = startCalendar.getYear() + "-" + startCalendar.getMonthInt() + "-" + startCalendar.getDayOfMonth();
                                endCalendar = new JCCalendar(end);
                                String endFormat = endCalendar.getYear() + "-" + endCalendar.getMonthInt() + "-" + endCalendar.getDayOfMonth();
                                condicion += " AND (activosFijos.incorporacion >= '" + startFormat + "' AND activosFijos.incorporacion <= '" + endFormat + "')";
                                List dataAnterior = ViewMain.DAO.query(new ActivoFijo(), 10, condicion);
                                ReportExcel.reportResumenGrupo(nameUnidad + listReport.getSelectedValue().toString(), data, dataAnterior);
                            }
                        } catch (Exception ex) {
                            Logger.getLogger(SelectReportForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(ViewMain.viewMain, "No selecciono ningun reporte a generar", "Mensaje", JOptionPane.ERROR_MESSAGE);
                }
            } else if (aux.equals(bCancelar)) {
                condicion = "";
                tpgSelectReport.setExpanded(true);
                tpgGenerar.setExpanded(false);
            }
        }

        @Override
        public void itemStateChanged(ItemEvent e) {
            Object aux = e.getSource();
            if (aux.equals(cbUnidad)) {
                object = cbUnidad.getSelectedItem();
                if (object instanceof Unidad) {
                    Unidad unidad = (Unidad) object;
                    if (cbAllOficina.isEnabled()) {
                        Oficina oficina = new Oficina();
                        oficina.setUnidad(unidad);
                        List list = ViewMain.DAO.getObjects(oficina);
                        if (!list.isEmpty()) {
                            cbOficina.setEnabled(true);
                            comboBoxModelOficina = new DefaultComboBoxModel();
                            comboBoxModelOficina.removeAllElements();
                            comboBoxModelOficina.addElement("Seleccione Oficina");
                            for (Object o : list) {
                                comboBoxModelOficina.addElement((Oficina) o);
                            }
                            cbOficina.setModel(comboBoxModelOficina);
                        } else {
                            cbOficina.setEnabled(false);
                            comboBoxModelOficina.removeAllElements();
                            cbOficina.setModel(comboBoxModelOficina);
                        }
                        if (comboBoxModelAuxiliar != null) {
                            comboBoxModelAuxiliar.removeAllElements();
                            cbAuxiliar.setModel(comboBoxModelAuxiliar);
                        }
                    }
                }
            } else if (aux.equals(cbOficina)) {
                object = cbOficina.getSelectedItem();
                if (object instanceof Oficina) {
                    Oficina oficina = (Oficina) object;
                    if (oficina != null) {
                        Responsable responsable = new Responsable();
                        responsable.setOficina(oficina);
                        List list = ViewMain.DAO.getObjects(responsable);
                        if (!list.isEmpty()) {
                            cbResponsable.setEnabled(true);
                            comboBoxModelResponsable = new DefaultComboBoxModel();
                            comboBoxModelResponsable.removeAllElements();
                            comboBoxModelResponsable.addElement("Seleccione Responsable");
                            for (Object o : list) {
                                comboBoxModelResponsable.addElement((Responsable) o);
                            }
                            cbResponsable.setModel(comboBoxModelResponsable);
                        } else {
                            cbResponsable.setEnabled(false);
                            comboBoxModelResponsable.removeAllElements();
                            cbResponsable.setModel(comboBoxModelResponsable);
                        }
                    }
                }
            } else if (aux.equals(cbGrupo)) {
                object = cbGrupo.getSelectedItem();
                if (object instanceof Grupo) {
                    Grupo grupo = (Grupo) object;
                    if (cbAllAuxiliar.isEnabled()) {
                        Auxiliar auxiliar = new Auxiliar();
                        auxiliar.setGrupo(grupo);
                        object = cbUnidad.getSelectedItem();
                        if (object instanceof Unidad) {
                            unidad = (Unidad) object;
                            auxiliar.setUnidad(unidad);
                            List list = ViewMain.DAO.getObjects(auxiliar);
                            if (!list.isEmpty()) {
                                cbAuxiliar.setEnabled(true);
                                comboBoxModelAuxiliar = new DefaultComboBoxModel();
                                comboBoxModelAuxiliar.removeAllElements();
                                comboBoxModelGrupo.addElement("Seleccione Auxiliar");
                                for (Object o : list) {
                                    comboBoxModelAuxiliar.addElement((Auxiliar) o);
                                }
                                cbAuxiliar.setModel(comboBoxModelAuxiliar);
                            } else {
                                cbAuxiliar.setEnabled(false);
                                comboBoxModelAuxiliar.removeAllElements();
                                cbAuxiliar.setModel(comboBoxModelAuxiliar);
                            }
                        }
                    }
                } //FIN OBJECT
            }//fin CBGRUPO
        }

        @Override
        public void onSelectionChange(SelectionChangedEvent sce) {
            Configuracion configuracion = new Configuracion();
            configuracion.setFechaUFV(dccEnd.getSelectedDate().getTime());
            configuracion = (Configuracion) ViewMain.DAO.getObject(configuracion);
            tfUFV.setText(configuracion.getUFV());
        }
    }
}
