/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view.activos;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JOptionPane;
import model.domain.ActivoFijo;
import model.domain.Baja;
import model.domain.Grupo;
import model.domain.Oficina;
import model.domain.Revaluo;
import model.domain.Unidad;
import utils.IconUI;
import view.ViewMain;
import view.common.CommonDialog;
import view.common.CommonView;

/**
 * ActivoFijoView
 *
 * @author Sergio Antonio Ochoa Martinez - gnu.java.sergio@gmail.com
 * @version 0.1
 */
public class ActivoFijoView extends javax.swing.JPanel implements CommonView {
    
    private CtrlActivoFijoView ctrlActivoFijoView;
    private ActivoFijoForm activoFijoForm;
    private SearchForm searchForm;
    private TransferForm transferForm;
    private DuplicateForm duplicateForm;
    private RevaluoForm revaluoForm;
    private BajaForm bajaForm;
    private ActivoFijoTable activoFijoTable;
    public static ActivoFijoView activoFijoView;
    private CommonDialog commonDialog;
    private CommonDialog dialog;
    
    public ActivoFijoView() {
        activoFijoView = this;
        ctrlActivoFijoView = new CtrlActivoFijoView();
        initComponents();
        searchForm = new SearchForm();
        transferForm = new TransferForm();
        duplicateForm = new DuplicateForm();
        revaluoForm = new RevaluoForm();
        bajaForm = new BajaForm();
        activoFijoForm = new ActivoFijoForm(new ActivoFijo());
        initTable();
    }
    
    private void initTable() {
        activoFijoTable = new ActivoFijoTable();
        this.add(activoFijoTable, BorderLayout.CENTER);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        bNew = new org.jc.swing.CoolButton(1);
        bUpdate = new org.jc.swing.CoolButton(2);
        bDuplicate = new org.jc.swing.CoolButton(2);
        bRevaluo = new org.jc.swing.CoolButton(0);
        bBaja = new org.jc.swing.CoolButton(0);
        bTransfer = new org.jc.swing.CoolButton(2);
        bDelete = new org.jc.swing.CoolButton(2);

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        bNew.setText("Nuevo");
        bNew.setIcon(IconUI.getResizableIcon("add", 32,32));
        bNew.addActionListener(ctrlActivoFijoView);
        jPanel1.add(bNew);

        bUpdate.setText("Editar");
        bUpdate.setIcon(IconUI.getResizableIcon("update", 32, 32));
        jPanel1.add(bUpdate);
        bUpdate.addActionListener(ctrlActivoFijoView);

        bDuplicate.setText("Duplicar");
        bDuplicate.setIcon(IconUI.getResizableIcon("duplicate", 32, 32));
        bDuplicate.addActionListener(ctrlActivoFijoView);
        jPanel1.add(bDuplicate);

        bRevaluo.setText("Revaluos");
        bRevaluo.addActionListener(ctrlActivoFijoView);
        bRevaluo.setIcon(IconUI.getResizableIcon("revaluo", 32, 32));
        jPanel1.add(bRevaluo);

        bBaja.setText("Bajas");
        bBaja.addActionListener(ctrlActivoFijoView);
        bBaja.setIcon(IconUI.getResizableIcon("baja", 32, 32));
        jPanel1.add(bBaja);

        bTransfer.setText("Transferir");
        bTransfer.setIcon(IconUI.getResizableIcon("transfer", 32, 32));
        bTransfer.addActionListener(ctrlActivoFijoView);
        jPanel1.add(bTransfer);

        bDelete.setText("Borrar");
        bDelete.setIcon(IconUI.getResizableIcon("delete", 32, 32));
        jPanel1.add(bDelete);
        bDelete.addActionListener(ctrlActivoFijoView);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jc.swing.CoolButton bBaja;
    private org.jc.swing.CoolButton bDelete;
    private org.jc.swing.CoolButton bDuplicate;
    private org.jc.swing.CoolButton bNew;
    private org.jc.swing.CoolButton bRevaluo;
    private org.jc.swing.CoolButton bTransfer;
    private org.jc.swing.CoolButton bUpdate;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    public CommonDialog getCommonDialog() {
        return commonDialog;
    }
    
    public void setCommonDialog(CommonDialog commonDialog) {
        this.commonDialog = commonDialog;
    }
    
    public CommonDialog getDialog() {
        return dialog;
    }
    
    public void setDialog(CommonDialog dialog) {
        this.dialog = dialog;
    }
    
    public ActivoFijoTable getActivoFijoTable() {
        return activoFijoTable;
    }
    
    public SearchForm getSearchForm() {
        return searchForm;
    }
    
    public RevaluoForm getRevaluoForm() {
        return revaluoForm;
    }
    
    public BajaForm getBajaForm() {
        return bajaForm;
    }
    
    @Override
    public void addNew() {
        commonDialog = new CommonDialog(ViewMain.viewMain, true);
        commonDialog.setTitle("Nuevo ActivoFijo");
        activoFijoForm.addAprobar(true, "ELABORADO");
        activoFijoForm.getbApiEstado().setText("Aprobar");
        activoFijoForm.getHeaderActivoFijo().setDescription("<html><b>Unidad: </b>" + ViewMain.viewMain.getUnidad().getIdUnidad() + " " + ViewMain.viewMain.getUnidad().getDescripcion() + "</b></html>");
        activoFijoForm.initComboBoxGrupo(ViewMain.DAO.getObjects(new Grupo()));
        activoFijoForm.getCbGrupo().setSelectedIndex(0);
        Oficina oficina = new Oficina();
        oficina.setUnidad(ViewMain.viewMain.getUnidad());
        activoFijoForm.initComboBoxOficina(ViewMain.DAO.getObjects(oficina));
        activoFijoForm.getCbOficina().setSelectedIndex(0);
        activoFijoForm.getTfCodigo().setEnabled(true);
        activoFijoForm.setObject(new ActivoFijo());
        activoFijoForm.getbGuardar().setText("Guardar");
        activoFijoForm.getbDuplicate().setEnabled(false);
        activoFijoForm.getbTransfer().setEnabled(false);
        commonDialog.add(activoFijoForm);
        commonDialog.visibleDialog("Nuevo Activo Fijo");
    }
    
    @Override
    public void addUpdate() {
        commonDialog = new CommonDialog(ViewMain.viewMain, true);
        ActivoFijo activoFijo = new ActivoFijo();
        activoFijo = (ActivoFijo) activoFijoTable.getSelectedObject(activoFijo);
        if (activoFijo != null) {
            activoFijo = (ActivoFijo) ViewMain.DAO.getObject(activoFijo);
            activoFijoForm.initComboBoxGrupo(ViewMain.DAO.getObjects(new Grupo()));
            Oficina oficina = new Oficina();
            oficina.setUnidad(ViewMain.viewMain.getUnidad());
            activoFijoForm.initComboBoxOficina(ViewMain.DAO.getObjects(oficina));
            activoFijoForm.getTfCodigo().setEnabled(false);
            activoFijoForm.setObject(activoFijo);
            activoFijoForm.getHeaderActivoFijo().setDescription("<html><b>Unidad: </b>" + ViewMain.viewMain.getUnidad().getIdUnidad() + " " + ViewMain.viewMain.getUnidad().getDescripcion() + "</b></html>");
            activoFijoForm.getbGuardar().setText("Actualizar");
            if (activoFijo.getApiEstado().equals("ELABORADO")) {
                activoFijoForm.getbApiEstado().setText("Aprobar");
                activoFijoForm.addAprobar(true, activoFijo.getApiEstado());
            } else {
                activoFijoForm.getbApiEstado().setText("Elaborar");
                activoFijoForm.addAprobar(false, activoFijo.getApiEstado());
            }
            activoFijoForm.getbDuplicate().setEnabled(true);
            activoFijoForm.getbTransfer().setEnabled(true);
            commonDialog.add(activoFijoForm);
            commonDialog.visibleDialog("Actualizando Activo Fijo");
            ViewMain.viewMain.getGlassPane().setVisible(false);
        } else {
            JOptionPane.showMessageDialog(ViewMain.viewMain, "No selecciono ninguna ActivoFijo", "Mensaje", 0);
        }
    }
    
    @Override
    public void addDelete() {
        ActivoFijo activoFijo = new ActivoFijo();
        activoFijo = (ActivoFijo) activoFijoTable.getSelectedObject(activoFijo);
        if (activoFijo != null) {
            int option = JOptionPane.showConfirmDialog(ViewMain.viewMain, "Esta seguro que desea borrar la ActivoFijo", "Borrar", 0);
            if (option == 0) {
                ViewMain.DAO.delete(activoFijo);
                activoFijoTable.reload();
            }
        } else {
            JOptionPane.showMessageDialog(ViewMain.viewMain, "No selecciono ninguna Activo Fijo", "Borrar", 0);
        }
    }
    
    public void addDuplicate(ActivoFijo activoFijo) {
        duplicateForm.setObject(activoFijo);
        dialog = new CommonDialog(ViewMain.viewMain, true);
        dialog.add(duplicateForm);
        dialog.visibleDialog("Duplicar Activo Fijo");
    }
    
    public void addTranfer(ActivoFijo activoFijo) {
        Unidad unidad = new Unidad();
        unidad.setEntidad(ViewMain.viewMain.getEntidad());
        List list = ViewMain.DAO.getObjects(unidad);
        transferForm.initComboBoxUnidad(list);
        transferForm.setObject(activoFijo);
        dialog = new CommonDialog(ViewMain.viewMain, true);
        dialog.add(transferForm);
        dialog.visibleDialog("Transferir Activo Fijo");
    }
    
    public void addBaja(Baja baja) {
        bajaForm.setObject(baja);
        dialog = new CommonDialog(ViewMain.viewMain, true);
        dialog.add(bajaForm);
        dialog.visibleDialog("Dar de Baja");
    }
    
    public void addRevaluo(ActivoFijo activoFijo, Revaluo revaluo) {
        revaluoForm.setObject(activoFijo, revaluo);
        dialog = new CommonDialog(ViewMain.viewMain, true);
        dialog.add(revaluoForm);
        dialog.visibleDialog("Revaluo Tecnico");
    }
    
    private class CtrlActivoFijoView implements ActionListener {
        
        @Override
        public void actionPerformed(ActionEvent e) {
            Object aux = e.getSource();
            if (aux.equals(bNew)) {
                addNew();
            } else if (aux.equals(bUpdate)) {
                addUpdate();
            } else if (aux.equals(bDelete)) {
                addDelete();
            } else if (aux.equals(bDuplicate)) {
                ActivoFijo activoFijo = new ActivoFijo();
                activoFijo = (ActivoFijo) activoFijoTable.getSelectedObject(activoFijo);
                if (activoFijo != null) {
                    activoFijo = (ActivoFijo) ViewMain.DAO.getObject(activoFijo);
                    addDuplicate(activoFijo);
                } else {
                    JOptionPane.showMessageDialog(ViewMain.viewMain, "No selecciono ninguna Activo Fijo", "Mensaje", JOptionPane.ERROR_MESSAGE);
                }
            } else if (aux.equals(bTransfer)) {
                ActivoFijo activoFijo = new ActivoFijo();
                activoFijo = (ActivoFijo) activoFijoTable.getSelectedObject(activoFijo);
                if (activoFijo != null) {
                    activoFijo = (ActivoFijo) ViewMain.DAO.getObject(activoFijo);
                    addTranfer(activoFijo);
                } else {
                    JOptionPane.showMessageDialog(ViewMain.viewMain, "No selecciono ninguna Activo Fijo", "Mensaje", JOptionPane.ERROR_MESSAGE);
                }
            } else if (aux.equals(bRevaluo)) {
                ActivoFijo activoFijo = new ActivoFijo();
                activoFijo = (ActivoFijo) activoFijoTable.getSelectedObject(activoFijo);
                if (activoFijo != null) {
                    activoFijo = (ActivoFijo) ViewMain.DAO.getObject(activoFijo);
                    Revaluo revaluo = new Revaluo();
                    revaluo.setActivoFijo(activoFijo);
                    RevaluoView.revaluoView.setRevaluo(revaluo);
                    RevaluoView.revaluoView.getRevaluoTable().reload();
                    ViewMain.viewMain.getDockableRevaluo().setTitleText("Revaluos del Activo - " + activoFijo.getIdActivoFijo());
                    ViewMain.viewMain.getFrontend().hide(ViewMain.viewMain.getDockableRevaluo());
                    ViewMain.viewMain.getFrontend().show(ViewMain.viewMain.getDockableRevaluo());
                } else {
                    JOptionPane.showMessageDialog(ViewMain.viewMain, "No selecciono ninguna Activo Fijo", "Mensaje", JOptionPane.ERROR_MESSAGE);
                }
            } else if (aux.equals(bBaja)) {                
                BajaView.bajaView.getBajaTable().reload();
                ViewMain.viewMain.getFrontend().hide(ViewMain.viewMain.getDockableBaja());
                ViewMain.viewMain.getFrontend().show(ViewMain.viewMain.getDockableBaja());
            }
        }
    }
}
