package org.jc.util;

import java.awt.Color;
import java.awt.Font;
import java.util.Date;
/*
 * NewJPanel.java
 *
 * Created on 13 de julio de 2006, 03:19 PM
 */

/**
 *
 * @author  Edison
 */
public class ClockDigital extends javax.swing.JComponent implements Temporizador{
    
    private Timer timer;
    private Color fondo;
    
    /** Creates new form NewJPanel */
    public ClockDigital() {
        Timer tim = new Timer( this );
        initComponents();
        setHoraPrevia();
        tim.start();
    }

    @Override
    public void setForeground(Color color) {
        super.setForeground(color);
        horaActual.setForeground(color);
    }

    @Override
    public void setFont(Font font) {
        super.setFont(font);
        horaActual.setFont(font);
    }

    @Override
    public Font getFont() {
        return horaActual.getFont();
    }


    private void setHoraPrevia(){
        Date actual = new Date();
        int horas = actual.getHours();
        int minutos = actual.getMinutes();
        int segundos = actual.getSeconds();
        int hora;
        String tiempo = "";

        // Los "ifs" que siguen son para formatear la hora
        // correctamente y que siempre ocupe lo mismo en la
        // Etiqueta, para que no salten las horas de posicion al
        // presentarse en pantalla
        if( horas > 12 ) 
            hora = horas - 12;
        else
            hora = horas;
        if( hora < 10 )
            tiempo += "0";
        tiempo += hora;
        tiempo += ":";

        if( minutos < 10 )
            tiempo += "0";
        tiempo += minutos + ":";

        if( segundos < 10 )
            tiempo += "0";
        tiempo += segundos;

        if( horas > 12 )
            tiempo += " pm";
        else
            tiempo += " am";

        horaActual.setText( tiempo );
    }
    
    public void timerIntervalo( Timer t ) {
        setHoraPrevia();
    }


    // Sobrecargamos los metodos que no nos interesan de la interface
    // Temporizador, porque solamente vamos a utilizar la que genera
    // un evento cada cierto intervalo de tiempo, las demas no tienen
    // interes en este ejemplo
    public void timerArrancado( Timer t ) { }

    public void timerParado( Timer t ) { }
      
    public void timerMuerto( Timer t ) { }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        horaActual = new javax.swing.JLabel();

        horaActual.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        horaActual.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        horaActual.setText("La Hora");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(horaActual, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(horaActual, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel horaActual;
    // End of variables declaration//GEN-END:variables
    
}



